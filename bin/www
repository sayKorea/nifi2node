#!/usr/bin/env node

/**
 * Module dependencies.
 */
"use strict"

//const sPort = "9443";
const sPort = "18080";
//const sServerName = "Node Express RestApi Project Server";

const app 	= require('../app');
const http 	= require('http');
const log 	= require("../common/logger");
const session 		= require('express-session');

/**
 * Get port from environment and store in Express.
 */
var port 	= normalizePort(process.env.PORT || sPort);
app.set('port', port);

/**
 * Create HTTP server.
 */
var server 	= http.createServer(app);

// var server = https.createServer(https_options, app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, function () {
	if(process.argv[2] === "dev"){
		log.info("██████╗ ███████╗██╗   ██╗        ");
		log.info("██╔══██╗██╔════╝██║   ██║        ");
		log.info("██║  ██║█████╗  ██║   ██║        ");
		log.info("██║  ██║██╔══╝  ╚██╗ ██╔╝        ");
		log.info("██████╔╝███████╗ ╚████╔╝         ");
		log.info("╚═════╝ ╚══════╝  ╚═══╝          ");
	}else if(process.argv[2] === "stag"){
		log.info("███████╗████████╗ ██████╗        ");
		log.info("██╔════╝╚══██╔══╝██╔════╝        ");
		log.info("███████╗   ██║   ██║  ███╗       ");
		log.info("╚════██║   ██║   ██║   ██║       ");
		log.info("███████║   ██║   ╚██████╔╝       ");
		log.info("╚══════╝   ╚═╝    ╚═════╝        ");
	}else if(process.argv[2] === "prod"){
		log.info("██████╗ ██████╗  ██████╗ ██████╗ ");
		log.info("██╔══██╗██╔══██╗██╔═══██╗██╔══██╗");
		log.info("██████╔╝██████╔╝██║   ██║██║  ██║");
		log.info("██╔═══╝ ██╔══██╗██║   ██║██║  ██║");
		log.info("██║     ██║  ██║╚██████╔╝██████╔╝");
		log.info("╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═════╝ ");
	}else{
		log.info("not found active type!");
		process.exit();
	}
});

/**
 * Server Event Listener
 */
server	.on('error', 		onError)
		.on('listening', 	onListening)
		//.on('request', 		onRequest)
		//.on('connection', 	onConnection);
		// .on('close', 		onClose)
		// .on('exit', 		onExit)
		// .on('finish', 		onFinish)
		// .on('infomation', 	onInfomation)
		// .on('abort', 		onAbort)
		// .on('timeout', 		onTimeout);
/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
	log.error('onError start');

	if (error.syscall !== 'listen') {
		throw error;
	};

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			log.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			log.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	};

	console.error('onError end');
};

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	log.debug('Listening on ' + bind);
};







